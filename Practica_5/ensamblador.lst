


ARM Macro Assembler    Page 1 


    1 00000000         ;NIP: 780336
    2 00000000         ;Alvaro Fraidias Monteagudo   
    3 00000000         ;r0 = Vector a ordenar
    4 00000000         ;r1 = Tama√±o del vector  
    5 00000000         ;r2 = En la subrutina suma es el iterador, en la subruti
                       na ORDENA es la parte de la izquierda del vector a orden
                       ar y en la subrutina QSOR es i.
    6 00000000         ;r3 = En la subrutina suma es el dato del vector, en la 
                       subrutina ORDENA es la parte de la derecha del vector a 
                       ordenar y en la subrutina QSORT es j y la posicion derec
                       ha del vector 
    7 00000000         ;r4 = En la subrutina suma es la suma acumulada, en la s
                       ubrutina QSORT es el dato del vector en la posicion T[i]
                       
    8 00000000         ;r5 = En la subrutina QSORT es el dato del vector en la 
                       posicion T[j]
    9 00000000         ;r6 = En la subrutina QSORT es un registro auxiliar para
                        hacer   aux = izquierda + derecha /2
   10 00000000         ;r7 = En la subrutina QSORT es x
   11 00000000         ;r8 = En la subrutina QSORT es w
   12 00000000         ;r9 = En la subrutina QSORT es la posicion izquierda del
                        vector 
   13 00000000         
   14 00000000                 AREA             datos, DATA, READWRITE
   15 00000000         
   16 00000000 00 00 00 
              00       resultadoSuma
                               SPACE            4
   17 00000004 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00 00 
              00 00 00 
              00       pila    SPACE            100
   18 00000068         top_pila
   19 00000068         
   20 00000068         
   21 00000068                 AREA             codigo, CODE
   22 00000000                 EXPORT           ordena
   23 00000000         
   24 00000000         ordena
   25 00000000         
   26 00000000 E59FD138        ldr              sp,=top_pila
   27 00000004 E3A00000        ldr              r0,=T
   28 00000008 E3A01000        ldr              r1,=N
   29 0000000C         
   30 0000000C E24DD004        sub              sp,sp,#4    ;Dejo el primer hue
                                                            co en la pila para 
                                                            el resultado de la 
                                                            suma
   31 00000010         
   32 00000010 E92D0003        push{r0-r1}
   33 00000014 EB000007        bl               SUMA
   34 00000018 E8BD0003        pop{r0-r1}
   35 0000001C         
   36 0000001C E59F2128        ldr              r2, =resultadoSuma
   37 00000020 E59D3000        ldr              r3, [sp, #0]
   38 00000024 E5823000        str              r3,[r2]
   39 00000028         
   40 00000028 E92D0003        push             {r0-r1}
   41 0000002C EB00000F        bl               ORDENA
   42 00000030 E8BD0003        pop              {r0-r1}
   43 00000034         
   44 00000034 EAFFFFFE 
                       fin     b                fin
   45 00000038         
   46 00000038         SUMA
   47 00000038 E92D401F        push{r0-r4,lr}
   48 0000003C E59D0018        ldr              r0,[sp,#24] ;cargo el r0 de la 
                                                            pila en r0 
   49 00000040 E59D101C        ldr              r1,[sp,#28] ;cargo el r1 de la 
                                                            pila en r1
   50 00000044 E3A02000        mov              r2,#0
   51 00000048 E3A03000        mov              r3,#0
   52 0000004C E3A04000        mov              r4,#0
   53 00000050         
   54 00000050 E1510002 
                       bucleSuma
                               cmp              r1,r2
   55 00000054 AA000003        bge              finbucleSuma
   56 00000058 E7903102        ldr              r3,[r0,r2,LSL #2]
   57 0000005C E0834004        add              r4, r3, r4
   58 00000060 E2822001        add              r2,r2,#1
   59 00000064 EAFFFFF9        b                bucleSuma
   60 00000068         finbucleSuma
   61 00000068         
   62 00000068 E58D4020        str              r4,[sp,#32]
   63 0000006C E8BD801F        pop{r0-r4,pc}                ;final subrutina su
                                                            ma
   64 00000070         



ARM Macro Assembler    Page 3 


   65 00000070         ORDENA
   66 00000070 E92D400E        push{r1-r3,lr}
   67 00000074 E2411001        sub              r1,r1,#1    ;qsort(0,n-1);
   68 00000078 E3A02000        mov              r2, #0      ;izda
   69 0000007C E1A03001        mov              r3, r1      ;dcha
   70 00000080 E92D000C        push{r2-r3}
   71 00000084 EB000001        bl               QSORT
   72 00000088 E8BD000C        pop{r2-r3}
   73 0000008C E8BD800E        pop{r1-r3,pc}                ;final subrutina or
                                                            dena
   74 00000090         
   75 00000090         QSORT
   76 00000090 E92D43FC        push{r2-r9,lr}
   77 00000094 E3A02000        mov              r2,#0       ; i
   78 00000098 E59D302C        ldr              r3, [sp,#44] ; cargar derecha (
                                                            tambien es j)
   79 0000009C E3A04000        mov              r4, #0      ; T[i]
   80 000000A0 E3A05000        mov              r5, #0      ; T[j]
   81 000000A4 E3A06000        mov              r6, #0      ; auxiliar
   82 000000A8 E3A07000        mov              r7, #0      ;x
   83 000000AC E3A08000        mov              r8, #0      ; w
   84 000000B0 E59D9028        ldr              r9, [sp, #40] ; izquierda   
   85 000000B4         
   86 000000B4         
   87 000000B4 E7904102        ldr              r4,[r0,r2,LSL #2]
   88 000000B8 E7905103        ldr              r5, [r0,r3,LSL #2]
   89 000000BC         
   90 000000BC E0836009        add              r6,r3,r9    ; aux = izquierda +
                                                             derecha
   91 000000C0 E1A060A6        mov              r6,r6,LSR #1 ; aux = izquierda 
                                                            + derecha /2
   92 000000C4 E7907106        ldr              r7,[r0,r6,LSL #2]
   93 000000C8         
   94 000000C8         doWhile
   95 000000C8         
   96 000000C8 EA000001        b                condicionPrimerWhile
   97 000000CC         
   98 000000CC         primerWhile
   99 000000CC         
  100 000000CC E2822001        add              r2, r2, #1
  101 000000D0 E7904102        ldr              r4,[r0,r2,LSL #2]
  102 000000D4         
  103 000000D4         condicionPrimerWhile
  104 000000D4         
  105 000000D4 E1540007        cmp              r4, r7
  106 000000D8 DAFFFFFB        ble              primerWhile
  107 000000DC EA000001        b                condicionSegundoWhile
  108 000000E0         
  109 000000E0         segundoWhile
  110 000000E0         
  111 000000E0 E2433001        sub              r3,r3,#1
  112 000000E4 E7905103        ldr              r5,[r0, r3, LSL #2]
  113 000000E8         
  114 000000E8         condicionSegundoWhile
  115 000000E8         
  116 000000E8 E1550007        cmp              r5, r7
  117 000000EC BAFFFFFB        blt              segundoWhile
  118 000000F0         
  119 000000F0         if1



ARM Macro Assembler    Page 4 


  120 000000F0 E1520003        cmp              r2,r3
  121 000000F4 D1A08004        movle            r8,r4
  122 000000F8 D1A04005        movle            r4,r5
  123 000000FC D1A05008        movle            r5,r8
  124 00000100 D2822001        addle            r2,r2,#1
  125 00000104 D2433001        suble            r3,r3,#1
  126 00000108         finif1
  127 00000108         
  128 00000108         conDoWhile
  129 00000108 E1520003        cmp              r2,r3
  130 0000010C DAFFFFED        ble              doWhile
  131 00000110         
  132 00000110         if2
  133 00000110 E1590003        cmp              r9, r3
  134 00000114 AA000002        bge              finif2
  135 00000118 E92D0208        push{r3,         r9}
  136 0000011C EBFFFFDB        bl               QSORT       ;recursividad
  137 00000120 E8BD000E        pop{r1-r3}
  138 00000124         
  139 00000124         finif2
  140 00000124         
  141 00000124         if3
  142 00000124 E59D302C        ldr              r3, [sp,#44] ; cargar derecha
  143 00000128 E1520003        cmp              r2,r3
  144 0000012C AA000002        bge              finif3
  145 00000130 E92D000C        push{r2,r3}
  146 00000134 EBFFFFD5        bl               QSORT       ;recursividad
  147 00000138 E8BD000C        pop{r2,r3}
  148 0000013C         
  149 0000013C         finif3
  150 0000013C         
  151 0000013C E8BD83FC        pop              {r2-r9,pc}  ;Fin subrutina QSOR
                                                            T
  152 00000140         
  153 00000140                 END
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=ensamblador.d -oensambla
dor.o -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" -
-list=ensamblador.lst ensamblador.s
